<workflow-app xmlns="uri:oozie:workflow:0.4" name="importer_software_origins">
	
	<parameters>
        <property>
            <name>offlineMode</name>
            <value>false</value>
            <description>works in offline mode by retrieving data from cache only, no call to external SH API endpoint is being executed</description>
        </property>
        <property>
            <name>pageSize</name>
            <value>100</value>
            <description>number of elements requested in each request</description>
        </property>
        <property>
            <name>endpointHost</name>
            <description>endpoint host name</description>
        </property>
        <property>
            <name>endpointUriRoot</name>
            <description>endpoint root URI, excluding host name</description>
        </property>
        <property>
            <name>endpointPort</name>
            <value>443</value>
            <description>endpoint port</description>
        </property>
        <property>
            <name>endpointScheme</name>
            <value>https</value>
            <description>endpoint scheme</description>
        </property>
        <property>
            <name>endpointRateLimitDelay</name>
            <value>10000</value>
            <description>endpoint request delay when hitting rate limit, expressed in milliseconds</description>
        </property>
        <property>
            <name>endpointReadTimeout</name>
            <value>60000</value>
            <description>endpoint read timeout set to 60 secs by default</description>
        </property>
        <property>
            <name>endpointConnectionTimeout</name>
            <value>60000</value>
            <description>endpoint connection timeout set to 60 secs by default</description>
        </property>
        <!-- cache related -->
		<property>
			<name>cache_location</name>
			<description>software origins HDFS cache location.
				Directory with appropriate permisions has to be created in advance.
			</description>
		</property>
        <property>
            <name>lock_managing_process</name>
            <value>eu.dnetlib.iis.common.lock.LockManagingProcess</value>
            <description>Lock managing process, to be overriden in integration tests</description>
        </property>
        <property>
            <name>zk_session_timeout</name>
            <value>60000</value>
            <description>zookeeper session timeout when handling locks (expressed in milliseconds)</description>
        </property>
        <!--  -->
		<property>
			<name>output</name>
			<description>software heritage origins avro datastore output</description>
		</property>
        <property>
            <name>output_report_root_path</name>
            <description>base directory for storing reports</description>
        </property>
        <property>
            <name>output_report_relative_path</name>
            <value>import_software_origins</value>
            <description>directory for storing report (relative to output_report_root_path)</description>
        </property>
	</parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
	<start to="get-cache-meta" />
	
    <action name="get-cache-meta">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=read_meta</arg>
            <capture-output />
        </java>
        <ok to="endpoint-uri-setter" />
        <error to="fail" />
    </action>
    
	<action name='endpoint-uri-setter'>
		<java>
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.common.oozie.property.ConditionalPropertySetter</arg>
			<arg>-Pcondition=${offlineMode eq "true"}</arg>
			<arg>-PinCaseOfTrue=$UNDEFINED$</arg>
			<arg>-PelseCase=${endpointUriRoot}</arg>
			<capture-output />
		</java>
		<ok to="softwareheritage-importer" />
		<error to="fail" />
	</action>

	<action name="softwareheritage-importer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/imported" />
                <delete path="${nameNode}${output}" />
			</prepare>
			<configuration>
				<property>
				    <name>oozie.launcher.mapreduce.user.classpath.first</name>
				    <value>true</value>
				</property>
			</configuration>
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.wf.importer.software.origins.SoftwareHeritageOriginsImporter</arg>
            <arg>-Pimport.software.heritage.endpoint.host=${endpointHost}</arg>
            <arg>-Pimport.software.heritage.endpoint.port=${endpointPort}</arg>
            <arg>-Pimport.software.heritage.endpoint.scheme=${endpointScheme}</arg>
            <arg>-Pimport.software.heritage.endpoint.uri.root=${wf:actionData('endpoint-uri-setter')['result']}</arg>
            <arg>-Pimport.software.heritage.endpoint.ratelimit.delay=${endpointRateLimitDelay}</arg>
            <arg>-Pimport.software.heritage.endpoint.read.timeout=${endpointReadTimeout}</arg>
            <arg>-Pimport.software.heritage.endpoint.connection.timeout=${endpointConnectionTimeout}</arg>
            <arg>-Pimport.software.heritage.page.size=${pageSize}</arg>
            <arg>-Pimport.software.heritage.start.index=${wf:actionData('get-cache-meta')['next_record_index']}</arg>

			<arg>-Oorigins=${workingDir}/imported</arg>
            
            <capture-output />
		</java>
		<ok to="report-from-endpoint" />
		<error to="fail" />
	</action>

    <action name="report-from-endpoint">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.report.ReportGenerator</arg>
            <arg>-Preport.import.software.origins.fromEndpoint=${wf:actionData('softwareheritage-importer')['TOTAL']}</arg>
            <arg>-Oreport=${output_report_root_path}/${output_report_relative_path}_from_endpoint</arg>
        </java>
        <ok to="decision-is-cache-empty" />
        <error to="fail" />
    </action>

    <decision name="decision-is-cache-empty">
        <switch>
            <case to="copy-to-output">${wf:actionData('get-cache-meta')['cache_id'] eq "$UNDEFINED$"}</case>
            <default to="merge-to-output" />
        </switch>
    </decision>
    
    <!-- init cache mode -->
        
    <action name="copy-to-output">
        <distcp xmlns="uri:oozie:distcp-action:0.2">
            <arg>${nameNode}${workingDir}/imported</arg>
            <arg>${nameNode}/${output}</arg>
        </distcp>
        <ok to="obtain-lock_for_initializing" />
        <error to="fail" />
    </action>
    
    <action name="obtain-lock_for_initializing">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=obtain</arg>
        </java>
        <ok to="get-new-cache-id_for_initializing" />
        <error to="release-lock-and-fail" />
    </action>

    <action name='get-new-cache-id_for_initializing'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=generate_new_id</arg>
            <capture-output />
        </java>
        <ok to="initialize_cache" />
        <error to="release-lock-and-fail" />
    </action>

    <action name="initialize_cache">
        <distcp xmlns="uri:oozie:distcp-action:0.2">
            <arg>${nameNode}${workingDir}/imported</arg>
            <arg>${nameNode}${cache_location}/${wf:actionData('get-new-cache-id_for_initializing')['cache_id']}</arg>
        </distcp>
        <ok to="write-new-meta_for_initializing" />
        <error to="fail-initialize_cache-temp_files_cleanup" />
    </action>

    <action name="fail-initialize_cache-temp_files_cleanup">
        <fs>
            <delete path="${nameNode}${cache_location}/${wf:actionData('get-new-cache-id_for_initializing')['cache_id']}" />
        </fs>
        <ok to="release-lock-and-fail" />
        <error to="release-lock-and-fail" />
    </action>

    <action name='write-new-meta_for_initializing'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=write_meta</arg>
            <arg>-Pid=${wf:actionData('get-new-cache-id_for_initializing')['cache_id']}</arg>
            <arg>-Pnext_record_index=${wf:actionData('softwareheritage-importer')['next_record_index']}</arg>
            <capture-output />
        </java>
        <ok to="release-lock-and-end" />
        <error to="fail-initialize_cache-temp_files_cleanup" />
    </action>
    <!-- end of init cache block -->
    
    <!-- update cache block -->
    <action name="merge-to-output">
        <sub-workflow>
            <app-path>${wf:appPath()}/transformers_common_union</app-path>
            <propagate-configuration />
            <configuration>
                <property>
                    <name>input_a</name>
                    <value>${cache_location}/${wf:actionData('get-cache-meta')['cache_id']}</value>
                </property>
                <property>
                    <name>input_b</name>
                    <value>${workingDir}/imported</value>
                </property>
                <property>
                    <name>output</name>
                    <value>${output}</value>
                </property>
                <property>
                    <name>schema</name>
                    <value>eu.dnetlib.iis.referenceextraction.softwareurl.schemas.SoftwareHeritageOrigin</value>
                </property>
                <property>
                    <name>union_count_report_key</name>
                    <value>import.software.origins.total</value>
                </property>
                <property>
                    <name>output_report</name>
                    <value>${output_report_root_path}/${output_report_relative_path}_total</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="check_output_isempty" />
        <error to="fail" />
    </action>
    
    <action name='check_output_isempty'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.utils.EmptyDatastoreVerifierProcess</arg>
            <arg>-Iinput=${workingDir}/imported</arg>
            <capture-output />
        </java>
        <ok to="decision-is-output-empty" />
        <error to="fail" />
    </action>

    <decision name="decision-is-output-empty">
        <switch>
            <!-- skipping metadataextraction merging process -->
            <case to="obtain-lock_for_merging">${wf:actionData('check_output_isempty')['isEmpty'] eq "false"}</case>
            <default to="end" />
        </switch>
    </decision>

    <action name="obtain-lock_for_merging">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=obtain</arg>
        </java>
        <ok to="get-new-cache-id_for_merging" />
        <error to="release-lock-and-fail" />
    </action>

    <action name='get-new-cache-id_for_merging'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=generate_new_id</arg>
            <capture-output />
        </java>
        <ok to="transformers_common_union_merge_cache" />
        <error to="release-lock-and-fail" />
    </action>

    <action name="transformers_common_union_merge_cache">
        <sub-workflow>
            <app-path>${wf:appPath()}/transformers_common_union</app-path>
            <propagate-configuration />
            <configuration>
                <property>
                    <name>input_a</name>
                    <value>${cache_location}/${wf:actionData('get-cache-meta')['cache_id']}</value>
                </property>
                <property>
                    <name>input_b</name>
                    <value>${workingDir}/imported</value>
                </property>
                <property>
                    <name>output</name>
                    <value>${cache_location}/${wf:actionData('get-new-cache-id_for_merging')['cache_id']}</value>
                </property>
                <property>
                    <name>schema</name>
                    <value>eu.dnetlib.iis.referenceextraction.softwareurl.schemas.SoftwareHeritageOrigin</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="write-new-cache-meta_for_merging" />
        <error to="fail-merge_cache-temp_files_cleanup" />
    </action>

    <action name="fail-merge_cache-temp_files_cleanup">
        <fs>
            <delete path="${nameNode}${cache_location}/${wf:actionData('get-new-cache-id_for_merging')['cache_id']}" />
        </fs>
        <ok to="release-lock-and-fail" />
        <error to="release-lock-and-fail" />
    </action>

    <action name='write-new-cache-meta_for_merging'>
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.cache.CacheMetadataManagingProcess</arg>
            <arg>-Pcache_location=${cache_location}</arg>
            <arg>-Pmode=write_meta</arg>
            <arg>-Pid=${wf:actionData('get-new-cache-id_for_merging')['cache_id']}</arg>
            <arg>-Pnext_record_index=${wf:actionData('softwareheritage-importer')['next_record_index']}</arg>
            <capture-output />
        </java>
        <ok to="release-lock-and-end" />
        <error to="fail-merge_cache-temp_files_cleanup" />
    </action>
    <!-- end of update cache block-->
    
    <!-- lock releasing actions -->
    <action name="release-lock-and-fail">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=release</arg>
        </java>
        <ok to="fail" />
        <error to="fail" />
    </action>

    <action name="release-lock-and-end">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>${lock_managing_process}</arg>
            <arg>-Pzk_session_timeout=${zk_session_timeout}</arg>
            <arg>-Pnode_id=${cache_location}</arg>
            <arg>-Pmode=release</arg>
        </java>
        <ok to="end" />
        <error to="fail" />
    </action>
    <!-- end of lock releasing actions -->
    
	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
	</kill>

	<end name="end" />

</workflow-app>
